# This file is generated by tools/update-dummy.py. DO NOT EDIT MANUALLY! To update this, run ./tools/update-dummy.py
from __future__ import annotations;from openllm_core.utils import DummyMetaclass as _DummyMetaclass, require_backends as _require_backends;import typing as _t; import types as _types;MODEL_MAPPING_NAMES:_t.Any=None;ChatGLM=_types.new_class('ChatGLM',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch','cpm_kernels','sentencepiece'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','cpm_kernels','sentencepiece'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','cpm_kernels','sentencepiece'])}));DollyV2=_types.new_class('DollyV2',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])}));Falcon=_types.new_class('Falcon',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch','einops','xformers'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','einops','xformers'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','einops','xformers'])}));FlanT5=_types.new_class('FlanT5',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])}));GPTNeoX=_types.new_class('GPTNeoX',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])}));Llama=_types.new_class('Llama',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch','fairscale','sentencepiece','scipy'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','fairscale','sentencepiece','scipy'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','fairscale','sentencepiece','scipy'])}));MPT=_types.new_class('MPT',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch','triton','einops'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','triton','einops'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','triton','einops'])}));OPT=_types.new_class('OPT',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])}));StableLM=_types.new_class('StableLM',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch'])}));StarCoder=_types.new_class('StarCoder',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch','bitsandbytes'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','bitsandbytes'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','bitsandbytes'])}));Baichuan=_types.new_class('Baichuan',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['torch','cpm_kernels','sentencepiece'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','cpm_kernels','sentencepiece'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['torch','cpm_kernels','sentencepiece'])}));__all__:list[str]=['MODEL_MAPPING_NAMES','ChatGLM','DollyV2','Falcon','FlanT5','GPTNeoX','Llama','MPT','OPT','StableLM','StarCoder','Baichuan']
