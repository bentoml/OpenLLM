# This file is generated by tools/update-dummy.py. DO NOT EDIT MANUALLY! To update this, run ./tools/update-dummy.py
from __future__ import annotations;from openllm_core.utils import DummyMetaclass as _DummyMetaclass, require_backends as _require_backends;import typing as _t; import types as _types;MODEL_VLLM_MAPPING_NAMES:_t.Any=None;VLLMBaichuan=_types.new_class('VLLMBaichuan',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm','cpm_kernels','sentencepiece'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','cpm_kernels','sentencepiece'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','cpm_kernels','sentencepiece'])}));VLLMDollyV2=_types.new_class('VLLMDollyV2',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])}));VLLMFalcon=_types.new_class('VLLMFalcon',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm','einops','xformers'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','einops','xformers'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','einops','xformers'])}));VLLMGPTNeoX=_types.new_class('VLLMGPTNeoX',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])}));VLLMMPT=_types.new_class('VLLMMPT',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm','triton','einops'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','triton','einops'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','triton','einops'])}));VLLMOPT=_types.new_class('VLLMOPT',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])}));VLLMStableLM=_types.new_class('VLLMStableLM',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm'])}));VLLMStarCoder=_types.new_class('VLLMStarCoder',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm','bitsandbytes'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','bitsandbytes'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','bitsandbytes'])}));VLLMLlama=_types.new_class('VLLMLlama',(_DummyMetaclass,),{},lambda ns: ns.update({'__module__':'openllm','_backends':['vllm','fairscale','sentencepiece','scipy'],'from_pretrained':classmethod(lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','fairscale','sentencepiece','scipy'])),'__init__':lambda cls,*param_decls,**attrs:_require_backends(cls,['vllm','fairscale','sentencepiece','scipy'])}));__all__:list[str]=['MODEL_VLLM_MAPPING_NAMES','VLLMBaichuan','VLLMDollyV2','VLLMFalcon','VLLMGPTNeoX','VLLMMPT','VLLMOPT','VLLMStableLM','VLLMStarCoder','VLLMLlama']
