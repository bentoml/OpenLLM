#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail

# Function to print script usage
print_usage() {
    echo "Usage: $0 [--release <major|minor|patch>]"
}

# Function to validate release argument
validate_release() {
    local release=$1

    if [[ $release == "major" || $release == "minor" || $release == "patch" ]]; then
        return 0
    else
        return 1
    fi
}

if ! command -v gh @ >&1 > /dev/null; then
    echo "ERROR: gh not installed. Aborting..."
    exit 1
fi

if ! command -v jq @ >&1 > /dev/null; then
    echo "ERROR: jq not installed. Aborting..."
    exit 1
fi

if ! command -v hatch @ >&1 > /dev/null; then
    echo "ERROR: hatch not installed. Aborting..."
    exit 1
fi

# Check if release flag is provided
if [[ $1 == "--release" ]]; then
    # Check if release argument is provided
    if [[ -z $2 ]]; then
        echo "Error: No release argument provided."
        print_usage
        exit 1
    fi

    release=$2

    if ! validate_release "$release"; then
        echo "Error: Invalid release argument. Only 'major', 'minor', or 'patch' are allowed."
        print_usage
        exit 1
    fi
else
    echo "Error: Unknown option or no option provided."
    print_usage
    exit 1
fi

echo "Running release actions (create-releases.yml)..."
echo '{"release_type": "'"$release"'"}' | gh workflow run create-releases.yml --repo bentoml/openllm --json

sleep 10

echo "Getting 'create-releases.yml' workflow id..."
WORKFLOW_ID=$(gh run list -w release --repo bentoml/openllm -L 1 --json databaseId | jq '.[]| .databaseId')

echo "Waiting for workflow create-releases.yml to complete..."
while true; do
    STATUS=$(gh run view "$WORKFLOW_ID" --json status --jq '.status')
    if [[ "${STATUS}" == "completed" ]]; then
        break
    fi
    sleep 10
done

sleep 10

WORKFLOW_ID=$(gh run list -w binary-distribution --repo bentoml/openllm -L 1 --json databaseId | jq '.[]| .databaseId')

echo "Waiting for binary distribution to complete..."
git pull --rebase
while true; do
    STATUS=$(gh run view "$WORKFLOW_ID" --json status --jq '.status')
    if [[ "${STATUS}" == "completed" ]]; then
        break
    fi
    sleep 10
done

# Set the maximum timeout (in seconds)
timeout=36000

sleep 10

echo "Generating release notes (release-notes.yml)..."
git pull --rebase
gh workflow run release-notes.yml --repo bentoml/openllm --ref "v$(hatch version)"

sleep 10

echo "Getting 'release-notes.yml' workflow id..."
WORKFLOW_ID=$(gh run list -w release-notes --repo bentoml/openllm -L 1 --json databaseId | jq '.[]| .databaseId')
start_time=$(date +%s)
while true; do
    STATUS=$(gh run view "$WORKFLOW_ID" --json status --jq '.status')
    if [[ $STATUS == "completed" ]]; then
        break
    fi
    current_time=$(date +%s)
    elapsed_time=$((current_time - start_time))
    if [[ $elapsed_time -gt $timeout ]]; then
        echo "Timeout reached. Cancelling the check."
        break
    fi
    sleep 10
done

# Run the second workflow (b.yml) if the first workflow completed
if [[ $STATUS != "completed" ]]; then
    echo "Failed to generate release notes. Check the logs at GitHub Actions."
    exit 1
else
    exit 0
fi
