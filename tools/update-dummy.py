#!/usr/bin/env python3
from __future__ import annotations
import os
import sys
import typing as t

from pathlib import Path

_ROOT = Path(__file__).parent.parent

sys.path.insert(0, (_ROOT / 'openllm-core' / 'src').__fspath__())
sys.path.insert(1, (_ROOT / 'openllm-python' / 'src').__fspath__())
from openllm import CONFIG_MAPPING
from openllm.models import auto
from openllm_core._typing_compat import LiteralBackend

if t.TYPE_CHECKING: from collections import OrderedDict

config_requirements = {k: [_.replace('-', '_') for _ in v.__openllm_requirements__] if v.__openllm_requirements__ else None for k, v in CONFIG_MAPPING.items()}
_dependencies: dict[LiteralBackend, str] = {k: v for k, v in zip(LiteralBackend.__args__[:-2], ('torch', 'vllm'))}

def get_target_dummy_file(backend: LiteralBackend) -> Path:
  return _ROOT / 'openllm-python' / 'src' / 'openllm' / 'utils' / f'dummy_{backend}_objects.py'

def mapping_names(backend: LiteralBackend):
  return 'MODEL_MAPPING_NAMES' if backend == 'pt' else f'MODEL_{backend.upper()}_MAPPING_NAMES'

def get_mapping(backend: LiteralBackend) -> OrderedDict[t.Any, t.Any]:
  return getattr(auto, mapping_names(backend))

def make_class_stub(model_name: str, backend: LiteralBackend, indentation: int = 2) -> list[str]:
  _dep_list, cl_ = [repr(v) for v in [_dependencies[backend], *(t.cast(t.List[str], config_requirements[model_name]) if config_requirements[model_name] else [])]
                    ], get_mapping(backend)[model_name]
  meth = f"lambda cls,*param_decls,**attrs:_require_backends(cls,[{','.join(_dep_list)}])"
  return [
      f"{cl_}=_types.new_class('{cl_}',(_DummyMetaclass,),{{}},lambda ns: ns.update({{'__module__':'openllm','_backends':[{','.join(_dep_list)}],'from_pretrained':classmethod({meth}),'__init__':{meth}}}))"
  ]

def main() -> int:
  _path = os.path.join(os.path.basename(os.path.dirname(__file__)), os.path.basename(__file__))
  for backend in _dependencies:
    with get_target_dummy_file(backend).open('w') as f:
      f.write('\n'.join([
          f'# This file is generated by {_path}. DO NOT EDIT MANUALLY! To update this, run ./{_path}',
          f'from __future__ import annotations;from openllm_core.utils import DummyMetaclass as _DummyMetaclass, require_backends as _require_backends;import typing as _t; import types as _types;{mapping_names(backend)}:_t.Any=None;{";".join([v for it in [make_class_stub(k, backend) for k in get_mapping(backend)] for v in it])}'
          + f";__all__:list[str]=['{mapping_names(backend)}',{','.join([repr(v) for v in get_mapping(backend).values()])}]\n"
      ]))
  return 0

if __name__ == '__main__': raise SystemExit(main())
