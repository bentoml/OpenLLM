"""This type stub file was generated by pyright."""

import io

cERROR_PIPE_BUSY = ...
cSECURITY_SQOS_PRESENT = ...
cSECURITY_ANONYMOUS = ...
MAXIMUM_RETRY_COUNT = ...

def check_closed(f): ...

class NpipeSocket:
    """Partial implementation of the socket API over windows named pipes.
    This implementation is only designed to be used as a client socket,
    and server-specific methods (bind, listen, accept...) are not
    implemented.
    """

    def __init__(self, handle=...) -> None: ...
    def accept(self): ...
    def bind(self, address): ...
    def close(self): ...
    @check_closed
    def connect(self, address, retry_count=...): ...
    @check_closed
    def connect_ex(self, address): ...
    @check_closed
    def detach(self): ...
    @check_closed
    def dup(self): ...
    def getpeername(self): ...
    def getsockname(self): ...
    def getsockopt(self, level, optname, buflen=...): ...
    def ioctl(self, control, option): ...
    def listen(self, backlog): ...
    def makefile(self, mode=..., bufsize=...): ...
    @check_closed
    def recv(self, bufsize, flags=...): ...
    @check_closed
    def recvfrom(self, bufsize, flags=...): ...
    @check_closed
    def recvfrom_into(self, buf, nbytes=..., flags=...): ...
    @check_closed
    def recv_into(self, buf, nbytes=...): ...
    @check_closed
    def send(self, string, flags=...): ...
    @check_closed
    def sendall(self, string, flags=...): ...
    @check_closed
    def sendto(self, string, address): ...
    def setblocking(self, flag): ...
    def settimeout(self, value): ...
    def gettimeout(self): ...
    def setsockopt(self, level, optname, value): ...
    @check_closed
    def shutdown(self, how): ...

class NpipeFileIOBase(io.RawIOBase):
    def __init__(self, npipe_socket) -> None: ...
    def close(self): ...
    def fileno(self): ...
    def isatty(self): ...
    def readable(self): ...
    def readinto(self, buf): ...
    def seekable(self): ...
    def writable(self): ...
